--- universe/UniverseObject.h	2008-10-20 07:21:52.000000000 +0200
+++ universe/UniverseObject.h~	2008-10-20 08:59:21.000000000 +0200
@@ -10,7 +10,7 @@
 
 #include "InhibitableSignal.h"
 
-#include <boost/serialization/is_abstract.hpp>
+#include <boost/serialization/assume_abstract.hpp>
 
 #include <set>
 #include <string>
@@ -179,7 +179,7 @@
     template <class Archive>
     void serialize(Archive& ar, const unsigned int version);
 };
-BOOST_IS_ABSTRACT(UniverseObject)
+BOOST_SERIALIZATION_ASSUME_ABSTRACT(UniverseObject)
 
 // template implementations
 template <class Iter>
 
--- util/Order.h	2008-10-20 07:21:56.000000000 +0200
+++ util/Order.h~	2008-10-20 09:06:06.000000000 +0200
@@ -9,7 +9,7 @@
 #include "../universe/ShipDesign.h"
 
 #include <boost/serialization/access.hpp>
-#include <boost/serialization/is_abstract.hpp>
+#include <boost/serialization/assume_abstract.hpp>
 #include <boost/serialization/nvp.hpp>
 
 #include <vector>
@@ -71,7 +71,7 @@
     void serialize(Archive& ar, const unsigned int version);
 };
 
-BOOST_IS_ABSTRACT(Order);
+BOOST_SERIALIZATION_ASSUME_ABSTRACT(Order);
 
 /////////////////////////////////////////////////////
 // RenameOrder
 
--- util/MultiplayerCommon.cpp	2008-10-20 07:21:56.000000000 +0200
+++ util/MultiplayerCommon.cpp~	2008-10-20 09:04:17.000000000 +0200
@@ -237,8 +237,8 @@
         fs::directory_iterator end_it;
         for (fs::directory_iterator it(save_dir); it != end_it; ++it) {
             try {
-                if (fs::exists(*it) && !fs::is_directory(*it) && it->leaf()[0] != '.') {
-                    std::string filename = it->leaf();
+                if (fs::exists(*it) && !fs::is_directory(*it) && it->path().leaf()[0] != '.') {
+                    std::string filename = it->path().leaf();
                     // disallow filenames that begin with a dot, and filenames with spaces in them
                     if (filename.find('.') != 0 && filename.find(' ') == std::string::npos && 
                         filename.find(MP_SAVE_FILE_EXTENSION) == filename.size() - MP_SAVE_FILE_EXTENSION.size()) {
                         
--- client/human/HumanClientApp.cpp	2008-10-20 07:21:56.000000000 +0200
+++ client/human/HumanClientApp.cpp~	2008-10-20 09:21:19.000000000 +0200
@@ -598,7 +598,7 @@
         fs::directory_iterator end_it;
         for (fs::directory_iterator it(save_dir); it != end_it; ++it) {
             if (!fs::is_directory(*it)) {
-                std::string filename = it->leaf();
+                std::string filename = it->path().leaf();
                 if (!new_game &&
                     filename.find(extension) == filename.size() - extension.size() && 
                     filename.find(save_filename.substr(0, save_filename.size() - 7)) == 0) {
                     
--- UI/ClientUI.cpp	2008-10-20 07:21:55.000000000 +0200
+++ UI/ClientUI.cpp~	2008-10-20 09:22:59.000000000 +0200
@@ -589,7 +589,7 @@
         fs::directory_iterator end_it;
         for (fs::directory_iterator it(dir); it != end_it; ++it) {
             try {
-                if (fs::exists(*it) && !fs::is_directory(*it) && boost::algorithm::starts_with(it->leaf(), prefix))
+                if (fs::exists(*it) && !fs::is_directory(*it) && boost::algorithm::starts_with(it->path().leaf(), prefix))
                     textures.push_back(ClientUI::GetTexture(*it, mipmap));
             } catch (const fs::filesystem_error& e) {
                 // ignore files for which permission is denied, and rethrow other exceptions
                 
--- UI/OptionsWnd.cpp	2008-10-20 07:21:55.000000000 +0200
+++ UI/OptionsWnd.cpp~	2008-10-20 09:25:44.000000000 +0200
@@ -512,7 +512,7 @@
     for (fs::directory_iterator it(GetSettingsDir()); it != end_it; ++it) {
         try {
             if (fs::exists(*it)) {
-                std::string filename = it->leaf();
+                std::string filename = it->path().leaf();
                 if (boost::algorithm::ends_with(filename, FONT_SUFFIX))
                     filenames.insert(filename);
             }
             
--- UI/TechTreeWnd.cpp	2008-10-20 07:21:55.000000000 +0200
+++ UI/TechTreeWnd.cpp~	2008-10-20 09:29:09.000000000 +0200
@@ -20,6 +20,18 @@
 #include <boost/format.hpp>
 #include <algorithm>
 
+#ifndef M_PI
+#define M_PI      3.14159265358979323846
+#endif
+
+#ifndef PI
+#define PI      M_PI
+#endif
+
+#define POINTS_PER_INCH   72
+#define POINTS(f_inch)   (ROUND((f_inch)*POINTS_PER_INCH))
+#define PS2INCH(ps)      ((ps)/(double)POINTS_PER_INCH)
+
 #include <boost/timer.hpp>
 
 
@@ -1901,7 +1913,7 @@
 
     // default graph properties
     agraphattr(graph, "rankdir", "LR");
-    agraphattr(graph, "ordering", "in");
+    //agraphattr(graph, "ordering", "in"); //<-- breaks on graphviz>=2.20
     agraphattr(graph, "ranksep", const_cast<char*>(boost::lexical_cast<std::string>(RANK_SEP).c_str()));
     agraphattr(graph, "nodesep", const_cast<char*>(boost::lexical_cast<std::string>(NODE_SEP).c_str())); 
     agraphattr(graph, "arrowhead", "none");
