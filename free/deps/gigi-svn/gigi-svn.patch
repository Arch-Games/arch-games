--- GG/BrowseInfoWnd.h	2008-10-19 09:47:32.000000000 +0200
+++ GG/BrowseInfoWnd.h~	2008-10-19 09:16:41.000000000 +0200
@@ -33,7 +33,7 @@
 #include <GG/Wnd.h>
 #include <GG/Font.h>
 
-#include <boost/serialization/is_abstract.hpp>
+#include <boost/serialization/assume_abstract.hpp>
 #include <boost/serialization/version.hpp>
 
 
@@ -150,7 +150,7 @@
 
 } // namespace GG
 
-BOOST_IS_ABSTRACT(GG::BrowseInfoWnd);
+BOOST_SERIALIZATION_ASSUME_ABSTRACT(GG::BrowseInfoWnd);
 BOOST_CLASS_VERSION(GG::BrowseInfoWnd, 1);
 BOOST_CLASS_VERSION(GG::TextBoxBrowseInfoWnd, 1);
 
--- GG/Control.h	2008-10-19 09:47:32.000000000 +0200
+++ GG/Control.h~	2008-10-19 09:16:29.000000000 +0200
@@ -31,7 +31,7 @@
 
 #include <GG/Wnd.h>
 
-#include <boost/serialization/is_abstract.hpp>
+#include <boost/serialization/assume_abstract.hpp>
 
 
 namespace GG {
@@ -83,7 +83,7 @@
 
 } // namespace GG
 
-BOOST_IS_ABSTRACT(GG::Control);
+BOOST_SERIALIZATION_ASSUME_ABSTRACT(GG::BrowseInfoWnd);
 
 // template implementations
 template <class Archive>

--- src/dialogs/FileDlg.cpp	2008-10-19 09:47:32.000000000 +0200
+++ src/dialogs/FileDlg.cpp~	2008-10-19 09:42:18.000000000 +0200
@@ -645,9 +645,9 @@
         std::multimap<std::string, ListBox::Row*> sorted_rows;
         for (fs::directory_iterator it(s_working_dir); it != end_it; ++it) {
             try {
-                if (fs::exists(*it) && fs::is_directory(*it) && it->leaf()[0] != '.') {
+                if (fs::exists(*it) && fs::is_directory(*it) && it->path().leaf()[0] != '.') {
                     ListBox::Row* row = new ListBox::Row();
-                    std::string row_text = "[" + it->leaf() + "]";
+                    std::string row_text = "[" + it->path().leaf() + "]";
                     row->push_back(row_text, m_font, m_text_color);
                     sorted_rows.insert(std::make_pair(row_text, row));
                 }
@@ -661,16 +661,16 @@
             sorted_rows.clear();
             for (fs::directory_iterator it(s_working_dir); it != end_it; ++it) {
                 try {
-                    if (fs::exists(*it) && !fs::is_directory(*it) && it->leaf()[0] != '.') {
+                    if (fs::exists(*it) && !fs::is_directory(*it) && it->path().leaf()[0] != '.') {
                         bool meets_filters = file_filters.empty();
                         for (unsigned int i = 0; i < file_filters.size() && !meets_filters; ++i) {
-                            if (parse(it->leaf().c_str(), file_filters[i]).full)
+                            if (parse(it->path().leaf().c_str(), file_filters[i]).full)
                                 meets_filters = true;
                         }
                         if (meets_filters) {
                             ListBox::Row* row = new ListBox::Row();
-                            row->push_back(it->leaf(), m_font, m_text_color);
-                            sorted_rows.insert(std::make_pair(it->leaf(), row));
+                            row->push_back(it->path().leaf(), m_font, m_text_color);
+                            sorted_rows.insert(std::make_pair(it->path().leaf(), row));
                         }
                     }
                 } catch (const fs::filesystem_error& e) {
