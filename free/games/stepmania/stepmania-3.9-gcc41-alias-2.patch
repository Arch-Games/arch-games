diff -u StepMania-3.9-src-orig/src/Difficulty.cpp StepMania-3.9-src/src/Difficulty.cpp
--- StepMania-3.9-src-orig/src/Difficulty.cpp	2004-07-11 09:21:29.000000000 +0200
+++ StepMania-3.9-src/src/Difficulty.cpp	2006-11-27 00:15:25.000000000 +0100
@@ -57,7 +57,7 @@
 
 CourseDifficulty GetNextShownCourseDifficulty( CourseDifficulty cd )
 {
-	for( CourseDifficulty d=(CourseDifficulty)(cd+1); d<NUM_DIFFICULTIES; ((int&)d)++ )
+	for( CourseDifficulty d=(CourseDifficulty)(cd+1); d<NUM_DIFFICULTIES; enum_add(d, 1) )
 	{
 		if( GAMESTATE->IsCourseDifficultyShown(d) )
 			return d;
diff -u StepMania-3.9-src-orig/src/PlayerNumber.cpp StepMania-3.9-src/src/PlayerNumber.cpp
--- StepMania-3.9-src-orig/src/PlayerNumber.cpp	2004-07-18 00:15:39.000000000 +0200
+++ StepMania-3.9-src/src/PlayerNumber.cpp	2006-11-27 00:15:25.000000000 +0100
@@ -22,41 +22,33 @@
 
 PlayerNumber GetNextHumanPlayer( PlayerNumber pn )
 {
-	for( PlayerNumber p=(PlayerNumber)(pn+1); p<NUM_PLAYERS; ((int&)p)++ )
-	{
-		if( GAMESTATE->IsHumanPlayer(p) )
-			return p;
-	}
+	for( enum_add(pn, 1); pn < NUM_PLAYERS; enum_add(pn, 1) )
+		if( GAMESTATE->IsHumanPlayer(pn) )
+			return pn;
 	return PLAYER_INVALID;
 }
 
 PlayerNumber GetNextEnabledPlayer( PlayerNumber pn )
 {
-	for( PlayerNumber p=(PlayerNumber)(pn+1); p<NUM_PLAYERS; ((int&)p)++ )
-	{
-		if( GAMESTATE->IsPlayerEnabled(p) )
-			return p;
-	}
+	for( enum_add(pn, 1); pn < NUM_PLAYERS; enum_add(pn, 1) )
+		if( GAMESTATE->IsPlayerEnabled(pn) )
+			return pn;
 	return PLAYER_INVALID;
 }
 
 PlayerNumber GetNextCpuPlayer( PlayerNumber pn )
 {
-	for( PlayerNumber p=(PlayerNumber)(pn+1); p<NUM_PLAYERS; ((int&)p)++ )
-	{
-		if( GAMESTATE->IsCpuPlayer(p) )
-			return p;
-	}
+	for( enum_add(pn, 1); pn < NUM_PLAYERS; enum_add(pn, 1) )
+		if( GAMESTATE->IsCpuPlayer(pn) )
+			return pn;
 	return PLAYER_INVALID;
 }
 
 PlayerNumber GetNextPotentialCpuPlayer( PlayerNumber pn )
 {
-	for( PlayerNumber p=(PlayerNumber)(pn+1); p<NUM_PLAYERS; ((int&)p)++ )
-	{
-		if( !GAMESTATE->IsHumanPlayer(p) )
-			return p;
-	}
+	for( enum_add(pn, 1); pn < NUM_PLAYERS; enum_add(pn, 1) )
+		if( !GAMESTATE->IsHumanPlayer(pn) )
+			return pn;
 	return PLAYER_INVALID;
 }
 
diff -u StepMania-3.9-src-orig/src/RageUtil.h StepMania-3.9-src/src/RageUtil.h
--- StepMania-3.9-src-orig/src/RageUtil.h	2004-10-07 19:56:16.000000000 +0200
+++ StepMania-3.9-src/src/RageUtil.h	2006-11-27 00:15:25.000000000 +0100
@@ -53,6 +53,14 @@
 	return false;
 }
 
+template<class T>
+inline bool ENUM_CLAMP( T &x, T l, T h )
+{
+	if (x > h)	{ x = h; return true; }
+	else if (x < l) { x = l; return true; }
+	return false;
+}
+
 inline void wrap( int &x, int n)
 {
 	if (x<0)
diff -u StepMania-3.9-src-orig/src/ScreenBookkeeping.cpp StepMania-3.9-src/src/ScreenBookkeeping.cpp
--- StepMania-3.9-src-orig/src/ScreenBookkeeping.cpp	2004-08-22 18:28:19.000000000 +0200
+++ StepMania-3.9-src/src/ScreenBookkeeping.cpp	2006-11-27 00:15:25.000000000 +0100
@@ -74,14 +74,14 @@
 void ScreenBookkeeping::MenuLeft( PlayerNumber pn )
 {
 	m_View = (View)(m_View-1);
-	CLAMP( (int&)m_View, 0, NUM_VIEWS-1 );
+	ENUM_CLAMP( m_View, View(0), View(NUM_VIEWS-1) );
 	ChangeView( m_View );
 }
 
 void ScreenBookkeeping::MenuRight( PlayerNumber pn )
 {
 	m_View = (View)(m_View+1);
-	CLAMP( (int&)m_View, 0, NUM_VIEWS-1 );
+	ENUM_CLAMP( m_View, View(0), View(NUM_VIEWS-1) );
 	ChangeView( m_View );
 }
 
diff -u StepMania-3.9-src-orig/src/ScreenSetTime.cpp StepMania-3.9-src/src/ScreenSetTime.cpp
--- StepMania-3.9-src-orig/src/ScreenSetTime.cpp	2004-08-31 10:29:34.000000000 +0200
+++ StepMania-3.9-src/src/ScreenSetTime.cpp	2006-11-27 00:15:25.000000000 +0100
@@ -160,7 +160,7 @@
 	SetTimeSelection OldSelection = m_Selection;
 	enum_add<SetTimeSelection>( m_Selection, iDirection );
 
-	CLAMP( (int&)m_Selection, 0, NUM_SET_TIME_SELECTIONS-1 );
+	ENUM_CLAMP( m_Selection, SetTimeSelection(0), SetTimeSelection(NUM_SET_TIME_SELECTIONS-1) );
 	if( iDirection != 0 && m_Selection == OldSelection )
 		return; // can't move any more
 
diff -u StepMania-3.9-src-orig/src/Song.cpp StepMania-3.9-src/src/Song.cpp
--- StepMania-3.9-src-orig/src/Song.cpp	2004-12-20 23:25:12.000000000 +0100
+++ StepMania-3.9-src/src/Song.cpp	2006-11-27 00:15:25.000000000 +0100
@@ -916,22 +916,22 @@
 	if( pSteps )
 		return pSteps;
 	newDC = (Difficulty)(dc-1);
-	CLAMP( (int&)newDC, 0, NUM_DIFFICULTIES-1 );
+	ENUM_CLAMP( newDC, Difficulty(0), Difficulty(NUM_DIFFICULTIES-1) );
 	pSteps = GetStepsByDifficulty( st, newDC );
 	if( pSteps )
 		return pSteps;
 	newDC = (Difficulty)(dc+1);
-	CLAMP( (int&)newDC, 0, NUM_DIFFICULTIES-1 );
+	ENUM_CLAMP( newDC, Difficulty(0), Difficulty(NUM_DIFFICULTIES-1) );
 	pSteps = GetStepsByDifficulty( st, newDC );
 	if( pSteps )
 		return pSteps;
 	newDC = (Difficulty)(dc-2);
-	CLAMP( (int&)newDC, 0, NUM_DIFFICULTIES-1 );
+	ENUM_CLAMP( newDC, Difficulty(0), Difficulty(NUM_DIFFICULTIES-1) );
 	pSteps = GetStepsByDifficulty( st, newDC );
 	if( pSteps )
 		return pSteps;
 	newDC = (Difficulty)(dc+2);
-	CLAMP( (int&)newDC, 0, NUM_DIFFICULTIES-1 );
+	ENUM_CLAMP( newDC, Difficulty(0), Difficulty(NUM_DIFFICULTIES-1) );
 	pSteps = GetStepsByDifficulty( st, newDC );
 	return pSteps;
 }
diff -au StepMania-3.9-src-orig/src/PaneDisplay.cpp StepMania-3.9-src/src/PaneDisplay.cpp
--- StepMania-3.9-src-orig/src/PaneDisplay.cpp	2004-08-22 19:35:22.000000000 +0200
+++ StepMania-3.9-src/src/PaneDisplay.cpp	2007-11-15 19:15:19.000000000 +0100
@@ -415,19 +415,19 @@
 		dir = 1;
 	}
 
-	PaneTypes ret = current;
+	int ret = (PaneTypes)current;
 	while( 1 )
 	{
 		ret = (PaneTypes) (ret + dir);
-		wrap( (int&) ret, NUM_PANES );
+		wrap( (int&)ret, NUM_PANES );
 
-		if( PaneIsValid( ret ) )
+		if( PaneIsValid( (PaneTypes)ret ) )
 			break;
 	}
 
 	LOG->Trace("pane %i", ret);
 
-	return ret;
+	return (PaneTypes)ret;
 }
 
 void PaneDisplay::Move( int dir )
diff -au StepMania-3.9-src-orig/src/PrefsManager.cpp StepMania-3.9-src/src/PrefsManager.cpp
--- StepMania-3.9-src-orig/src/PrefsManager.cpp	2005-10-28 01:40:53.000000000 +0200
+++ StepMania-3.9-src/src/PrefsManager.cpp	2007-11-15 18:29:32.000000000 +0100
@@ -343,6 +343,7 @@
 
 void PrefsManager::ReadPrefsFromFile( CString sIni )
 {
+	int temp = 0;
 	IniFile ini;
 	if( !ini.ReadFile(sIni) )
 		return;
@@ -362,7 +363,8 @@
 	ini.GetValue( "Options", "UseDedicatedMenuButtons",			m_bOnlyDedicatedMenuButtons );
 	ini.GetValue( "Options", "ShowStats",						m_bShowStats );
 	ini.GetValue( "Options", "ShowBanners",						m_bShowBanners );
-	ini.GetValue( "Options", "BackgroundMode",					(int&)m_BackgroundMode );
+	ini.GetValue( "Options", "BackgroundMode",					temp);//(int&)m_BackgroundMode );
+	m_BackgroundMode = (BackgroundModes)temp;
 	ini.GetValue( "Options", "NumBackgrounds",					m_iNumBackgrounds);
 	ini.GetValue( "Options", "ShowDanger",						m_bShowDanger );
 	ini.GetValue( "Options", "BGBrightness",					m_fBGBrightness );
@@ -458,10 +460,12 @@
 	ini.GetValue( "Options", "TexturePreload",					m_bTexturePreload );
 	ini.GetValue( "Options", "DelayedScreenLoad",				m_bDelayedScreenLoad );
 	ini.GetValue( "Options", "DelayedModelDelete",				m_bDelayedModelDelete );
-	ini.GetValue( "Options", "BannerCache",						(int&)m_BannerCache );
+	ini.GetValue( "Options", "BannerCache",						temp); //(int&)m_BannerCache );
+	m_BannerCache = (BannerCacheMode)temp;
 	ini.GetValue( "Options", "PalettedBannerCache",				m_bPalettedBannerCache );
 	ini.GetValue( "Options", "FastLoad",						m_bFastLoad );
-	ini.GetValue( "Options", "MusicWheelUsesSections",			(int&)m_MusicWheelUsesSections );
+	ini.GetValue( "Options", "MusicWheelUsesSections",			temp); //(int&)m_MusicWheelUsesSections );
+	m_MusicWheelUsesSections = (MusicWheelUsesSections)temp;
 	ini.GetValue( "Options", "MusicWheelSwitchSpeed",			m_iMusicWheelSwitchSpeed );
 	ini.GetValue( "Options", "SoundDrivers",					m_sSoundDrivers );
 	ini.GetValue( "Options", "SoundWriteAhead",					m_iSoundWriteAhead );
@@ -475,14 +479,16 @@
 	ini.GetValue( "Options", "CoinMode",						m_iCoinMode );
 	ini.GetValue( "Options", "CoinsPerCredit",					m_iCoinsPerCredit );
 	m_iCoinsPerCredit = max(m_iCoinsPerCredit, 1);
-	ini.GetValue( "Options", "Premium",							(int&)m_Premium );
+	ini.GetValue( "Options", "Premium",							temp); //(int&)m_Premium );
+	m_Premium = (Premium)temp;
 	ini.GetValue( "Options", "DelayedCreditsReconcile",			m_bDelayedCreditsReconcile );
 	ini.GetValue( "Options", "BoostAppPriority",				m_iBoostAppPriority );
 	ini.GetValue( "Options", "PickExtraStage",					m_bPickExtraStage );
 	ini.GetValue( "Options", "ComboContinuesBetweenSongs",		m_bComboContinuesBetweenSongs );
 	ini.GetValue( "Options", "LongVerSeconds",					m_fLongVerSongSeconds );
 	ini.GetValue( "Options", "MarathonVerSeconds",				m_fMarathonVerSongSeconds );
-	ini.GetValue( "Options", "ShowSongOptions",					(int&)m_ShowSongOptions );
+	ini.GetValue( "Options", "ShowSongOptions",					temp); //(int&)m_ShowSongOptions );
+	m_ShowSongOptions = (Maybe)temp;
 	ini.GetValue( "Options", "LightsStepsDifficulty",			m_sLightsStepsDifficulty );
 	ini.GetValue( "Options", "BlinkGameplayButtonLightsOnNote",	m_bBlinkGameplayButtonLightsOnNote );
 	ini.GetValue( "Options", "AllowUnacceleratedRenderer",		m_bAllowUnacceleratedRenderer );
@@ -502,14 +508,15 @@
 	ini.GetValue( "Options", "AutogenGroupCourses",				m_bAutogenGroupCourses );
 	ini.GetValue( "Options", "BreakComboToGetItem",				m_bBreakComboToGetItem );
 	ini.GetValue( "Options", "LockCourseDifficulties",			m_bLockCourseDifficulties );
-	ini.GetValue( "Options", "ShowDancingCharacters",			(int&)m_ShowDancingCharacters );
-
-	ini.GetValue( "Options", "CourseSortOrder",					(int&)m_iCourseSortOrder );
+	ini.GetValue( "Options", "ShowDancingCharacters",			temp); //(int&)m_ShowDancingCharacters );
+	m_ShowDancingCharacters = (CharacterOption)temp;
+	ini.GetValue( "Options", "CourseSortOrder",					temp); //(int&)m_iCourseSortOrder );
+	m_iCourseSortOrder = (CourseSortOrders)temp;
 	ini.GetValue( "Options", "MoveRandomToEnd",					m_bMoveRandomToEnd );
 	ini.GetValue( "Options", "SubSortByNumSteps",				m_bSubSortByNumSteps );
 
-	ini.GetValue( "Options", "ScoringType",						(int&)m_iScoringType );
-
+	ini.GetValue( "Options", "ScoringType",						temp); //(int&)m_iScoringType );
+	m_iScoringType = (ScoringTypes)temp;
 	ini.GetValue( "Options", "ProgressiveLifebar",				m_iProgressiveLifebar );
 	ini.GetValue( "Options", "ProgressiveNonstopLifebar", 		m_iProgressiveNonstopLifebar );
 	ini.GetValue( "Options", "ProgressiveStageLifebar",			m_iProgressiveStageLifebar );
@@ -525,7 +532,8 @@
 	ini.GetValue( "Options", "LastSeenMemory",					m_iLastSeenMemory );
 #endif
 	ini.GetValue( "Options", "CoursesToShowRanking",			m_sCoursesToShowRanking );
-	ini.GetValue( "Options", "GetRankingName",					(int&)m_iGetRankingName);
+	ini.GetValue( "Options", "GetRankingName",					temp); //(int&)m_iGetRankingName);
+	m_iGetRankingName = (GetRankingName)temp;
 	ini.GetValue( "Options", "SmoothLines",						m_bSmoothLines );
 	ini.GetValue( "Options", "GlobalOffsetSeconds",				m_fGlobalOffsetSeconds );
 	ini.GetValue( "Options", "ShowBeginnerHelper",				m_bShowBeginnerHelper );
diff -au StepMania-3.9-src-orig/src/ezsockets.cpp StepMania-3.9-src/src/ezsockets.cpp
--- StepMania-3.9-src-orig/src/ezsockets.cpp	2005-10-01 05:32:45.000000000 +0200
+++ StepMania-3.9-src/src/ezsockets.cpp	2007-11-15 16:40:58.000000000 +0100
@@ -434,9 +434,9 @@
 	if(state == skCONNECTED || state == skLISTENING)
 		return recv(sock, data, 1024, 0);
 	
-	fromAddr_len = sizeof(sockaddr_in);
+	socklen_t sock_len = sizeof(sockaddr_in);
 	return recvfrom(sock, data, 1024, 0, (sockaddr*)&fromAddr,
-					(socklen_t*)&fromAddr_len);
+					(socklen_t*)&sock_len);
 }
 
 int EzSockets::pWriteData(const char* data, int dataSize)
diff -au StepMania-3.9-src-orig/src/ezsockets.h StepMania-3.9-src/src/ezsockets.h
--- StepMania-3.9-src-orig/src/ezsockets.h	2005-10-01 05:32:45.000000000 +0200
+++ StepMania-3.9-src/src/ezsockets.h	2007-11-15 16:38:46.000000000 +0100
@@ -108,7 +108,7 @@
 		skERROR 
 	};
     struct sockaddr_in fromAddr;
-	unsigned long fromAddr_len;
+	//unsigned long fromAddr_len;
 
 	//The following possibly should be private.
 	string inBuffer;
